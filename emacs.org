* Options                                                  :noexport:ARCHIVE:
#+TITLE: My GNU Emacs configuration for work
#+SUBTITLE: A new personal emacs configuration for work
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :results silent
#+STARTUP: show2levels indent
#+DESCRIPTION: Loading emacs configuration using org-babel
#+OPTIONS: H:5 num:nil tags:nil toc:3 timestamps:t
#+TAGS: emacs
#+CATEGORIES: editing
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 27.2 (<a href="https://orgmode.org">Org</a> mode 9.4.6)
#+SETUPFILE: vendor/org-html-themes/org/theme-readtheorg-local.setup
#+HTML_HEAD: <style>pre.src{background:#131331;color:white;} </style>
* Introduction
This is my version of an configuration file for GNU Emacs. I now use ~straight~ to install packages and ~use-package~ to configure them. Previously I used ~package.el~, the built-in package-handling system with ~use-package~ but it became a bit awkward and slow when I wanted to upgrade installed packages. This configuration should start without problems but will take a very long time the first time, since ~straight~ needs to clone and build all packages. And ~Git~ is needed before this to work.

Load [[file:emacs.org][emacs.org]] in emacs and run ~org-babel-tangle~ to create startup files the first time. Restart emacs.
** Inspiration
/All config in one file/ from [[https://github.com/daviwil/emacs-from-scratch/tree/9388cf6ecd9b44c430867a5c3dad5f050fdc0ee1][System Crafters Emacs from Scratch]].

*** Update git submodules
Initialize the submodules.
#+begin_src eshell :results silent
git submodule update --init
#+end_src
Update the submodules to the latest remote version.
#+begin_src eshell :results silent
git submodule update --remote --rebase --recursive
#+end_src
Checkout the branch that the remote head points to.
#+begin_src eshell :results silent
git submodule foreach 'echo $sm_path `git rev-parse HEAD`'
#+end_src
** Early init
The file to load before ~init.el~. This will be created after ~org-babel-tangle~.
#+begin_src emacs-lisp :tangle ./early-init.el
;;; early-init.el --- Startup file before init.el to disable settings.

;;; Commentary:

;; From https://github.com/raxod502/straight.el#getting-started
;; Disable stuff before init.el gets loaded.
;; See https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html

;;; Code:

(message "*** Reading early-init.el @ %s" (format-time-string "%Y-%m-%d %H:%M:%S" (current-time)))
(setq package-enable-at-startup nil)

;; From Doom early-init.
(set-language-environment "UTF-8")

;; From Doom, shaves off a second from startup.
(setq-default inhibit-redisplay t
              inhibit-message t)
(add-hook 'window-setup-hook
          (lambda ()
            (setq-default inhibit-redisplay nil
                          inhibit-message nil)
            (redisplay)))

(provide 'early-init)
;;; early-init.el ends here
#+end_src
** init.el
#+begin_src emacs-lisp
;;; init.el --- Configuration of Emacs

;;; Commentary:

;; From https://gitlab.com/buildfunthings/emacs-config/blob/master/init.el

;;; Code:
(message "*** Reading from %s ***" (buffer-name))

;; Debug startup
(setq debug-on-error nil)
(setq debug-on-quit nil)

;; Garbage collection
;; Increase the garbage collection threshold to make startup faster
(defun my/garbage-collect ()
  (setq gc-cons-threshold (* 1 1024 1024)))

(setq gc-cons-threshold (* 50 1024 1024))
(setq garbage-collection-messages nil)
(add-hook 'after-init-hook #'my/garbage-collect)

;; From emacs-from-scratch https://github.com/daviwil/emacs-from-scratch/blob/master/init.el
(defun efs/display-startup-time ()
  "Prints the startup time for Emacs."
  (message "*** Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)

(defvar start-time (float-time (current-time)))

(defun my/format-time (time)
  "Displays formatted TIME."
  (format-time-string "%Y-%m-%d %H:%M:%S" time))

(defun my/startup-timer ()
  "Measures time differences."
  (format-time-string "%M:%S.%3N" (- (float-time (current-time)) start-time)))

(message "*** Started emacs @ %s" (my/format-time start-time))
(message "*** Reading configuration from init.el...")
#+end_src
*** Straight
Bootstrap straight.
#+begin_src emacs-lisp
;; install straight package manager
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Also install use-package
(straight-use-package 'use-package)
(customize-set-variable 'straight-use-package-by-default t)
(customize-set-variable 'straight-host-usernames
      '((github . "sdaaish")
        (gitlab . "sdaaish")))
(setq load-prefer-newer t)
#+end_src
** Org mode
#+begin_src emacs-lisp
(use-package org
  :straight (:type git :repo "git://git.sv.gnu.org/emacs/org-mode.git")
  :bind ("C-x C-S-s" . org-save-all-org-buffers))
#+end_src
** Org-contrib
#+begin_src emacs-lisp
(use-package org-contrib
  :straight (:type git :includes (ob-arduino ob-clojure-literate ob-csharp ob-eukleides ob-fomus ob-julia ob-mathematica ob-mathomatic ob-oz ob-php ob-redis ob-sclang ob-smiles ob-spice ob-stata ob-tcl ob-vbnet ol-bookmark ol-elisp-symbol ol-git-link ol-man ol-mew ol-notmuch ol-vm ol-wl org-annotate-file org-attach-embedded-images org-bibtex-extras org-checklist org-choose org-collector org-contacts org-contribdir org-depend org-effectiveness org-eldoc org-eval org-eval-light org-expiry org-interactive-query org-invoice org-learn org-license org-mac-iCal org-mac-link org-mairix org-notify org-panel org-passwords org-registry org-screen org-screenshot org-secretary org-static-mathjax org-sudoku orgtbl-sqlinsert org-toc org-track org-velocity org-wikinodes ox-bibtex ox-confluence ox-deck ox-extra ox-freemind ox-groff ox-koma-letter ox-rss ox-s5 ox-taskjuggler) :repo "https://github.com/sdaaish/org-contrib" :files (:defaults "lisp/*.el")))
#+end_src
** No littering
#+begin_src emacs-lisp
(use-package no-littering)
#+end_src
** Diminish
Reduces text in the minibar.
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
** Helpful
#+begin_src emacs-lisp
    (use-package helpful
    :commands (counsel-describe-function-function
               counsel-describe-variable-function)
    :custom-face (helpful-heading ((t (:foreground "GreenYellow" :weight bold))))
    :bind (("C-h C" . #'helpful-command)
           ("C-c C-h" . #'helpful-at-point)
           ("C-h a" . #'helpful-symbol)
           ([remap describe-key] . helpful-key)
           ([remap describe-variable] . counsel-describe-variable)
           ([remap describe-function] . counsel-describe-function)))
#+end_src
** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
        ivy-count-format "(%d/%d) "
        enable-recursive-minibuffers t)
  :bind
  ("C-x C-f" . counsel-find-file)
  ("C-c C-S-F" . counsel-recentf)
  ("C-c C-S-R" . ivy-resume)
  ("C-s" . swiper)
  ("C-r" . swiper)
  ("C-c g" . counsel-git)
  ("C-c j" . counsel-git-grep)
  ("C-c k" . counsel-ag)
  ("C-c r" . counsel-rg)
  ("C-c G" . counsel-google))
#+end_src
** Amx
Use ~amx~ smart executionlist.
#+begin_src emacs-lisp
(use-package amx
  :config
  (amx-mode t))
#+end_src
** Swiper
#+begin_src emacs-lisp
  (use-package swiper
    :config
    (setq ivy-use-selectable-prompt t
          swiper-action-recenter t
          swiper-include-line-number-in-search t
          swiper-goto-start-of-match t
          swiper-stay-on-quit nil)
    (set-face-background 'swiper-line-face "Light Slate Grey"))
#+end_src
** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :diminish
    :config
    (setq counsel-describe-function-function #'helpful-callable
          counsel-describe-variable-function #'helpful-variable)
    (counsel-mode 1)
    :bind
    ("M-x" . counsel-M-x)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable))
#+end_src
** Ivy rich
#+begin_src emacs-lisp
(use-package ivy-rich
  :init  (ivy-rich-mode 1)
  :config
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  (customize-set-variable 'ivy-rich-path-style 'abbrev))
#+end_src
* Packages
Various packages
** Yas
Yet Another Snippet tool.
#+begin_src emacs-lisp
(use-package yasnippet
  :config (yas-reload-all)
  :hook ((prog-mode org-mode) . (lambda ()
                                  (yas-minor-mode 1))))
#+end_src
** Extra snippets
Load more snippets
#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet)
#+end_src
** ivy-yasnippet
#+begin_src emacs-lisp
(use-package ivy-yasnippet
  :bind ("C-x y" . ivy-yasnippet))
#+end_src
** Silversearcher
Use ~ag~ to search for stuff. Requires ~silversearcher-ag~ to be installed in the system.
#+begin_src emacs-lisp
  (use-package ag
    :commands counsel-ag)
#+end_src
** Ripgrep
Use ripgrep to search for files. See [[https://rgel.readthedocs.io/][Manual]].
#+begin_src emacs-lisp
(use-package rg
  :config (rg-enable-default-bindings))
#+end_src
* Variables
Settings for variables.
** Functions that load config files
These are custom functions to load settings into list for org-agenda.
#+begin_src emacs-lisp
(defun my/read-lines (filePath)
  "Return a list of lines of a file at filePath."
  (if (file-exists-p filePath)
      (with-temp-buffer
        (insert-file-contents filePath)
        (split-string (buffer-string) "\n" t))))

(defun my/fullpath (filepath directory)
  "Concatenate directory to names in filepath and return as list."
  (let (value)
    (setq list (my/read-lines filepath))
    (dolist (shortfile list value)
      (setq fullpath (concat directory shortfile))
      (setq value (cons fullpath value)))))
#+end_src
** Load local personal settings
User name and email among others.
#+begin_src emacs-lisp
(setq my/private-elfile (expand-file-name "personal.el" user-emacs-directory))
(if (file-exists-p my/private-elfile)
    (load-file my/private-elfile))
#+end_src
** Set paths and filenames
#+begin_src emacs-lisp
(defvar my/init-dir (file-name-directory (or load-file-name (buffer-file-name))))
(defvar my/emacs-orgfile (expand-file-name "emacs.org" my/init-dir))
(defvar my/emacs-elfile (expand-file-name "init.el" my/init-dir))

(defconst my/onedrive-dir (getenv "OneDrive"))
(defconst my/org-directory (expand-file-name "Org/" my/onedrive-dir))
(defconst my/notes-file (expand-file-name "inbox.org" my/org-directory))
(defconst my/diary-file (expand-file-name "diary.org" my/org-directory))
(defconst my/org-agenda-files (expand-file-name ".agenda-files" my/org-directory))
(defvar my/refile-targets (my/read-lines (expand-file-name ".target-files"  my/org-directory)))
;; My org-files directory
(setq org-directory my/org-directory)
;; Org-agenda can read from a file
(setq org-agenda-files my/org-agenda-files)
;; Store notes here
(setq org-default-notes-file my/notes-file)
;; Choose targets for refile from this file
(setq org-refile-targets '((my/refile-targets :maxlevel . 3)))
#+end_src
* Functions
My custom functions for various stuff.
** Open emacs org-file
#+begin_src emacs-lisp
(defun my/find-emacs-org-file ()
  "Opens my emacs org config file."
  (interactive)
  (find-file (expand-file-name "emacs.org" user-emacs-directory)))
#+end_src
** Open emacs init-file
#+begin_src emacs-lisp
(defun my/find-emacs-init-file ()
  "Opens my emacs init-file."
  (interactive)
  (find-file (expand-file-name "init.el" user-emacs-directory)))
#+end_src
** Steal the mouse
From Steve Yegge's talk on emacs. [[https://youtu.be/6ZWp05OW1c0][Stevey's Tech Talk E41: Emacs Part 2 - Emergency Emacs]]
#+begin_src emacs-lisp
(defun my/steal-mouse ()
"Moves the mouse to the upper right corner."
  (interactive)
  (and window-system
       (set-mouse-position
        (selected-frame)
        (1- (frame-width)) -1)))
#+end_src
** Include lisp
Include local lisp-files.
#+begin_src emacs-lisp
(when (file-exists-p (expand-file-name "work/lisp" "~"))
  (add-to-list 'load-path (expand-file-name "work/lisp" "~"))
	(require 'cbc.el))
#+end_src
* Custom settings
** Visual settings
#+begin_src emacs-lisp
(bind-key "C-c t" 'toggle-truncate-lines)
(tool-bar-mode -1)
(set-scroll-bar-mode nil)
(menu-bar-mode -1)
#+end_src

#+BEGIN_SRC emacs-lisp
(set-default 'word-wrap t)
(setq-default visual-line-mode t)
#+end_src
** No case-sensitive for search
#+begin_src emacs-lisp
(setq-default case-fold-search t)
#+end_src
** Turn off case sensitivity for buffers
#+begin_src emacs-lisp
(customize-set-variable 'read-buffer-completion-ignore-case t)
#+end_src
** Fonts
Use Cascadia Code Nerd Font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                        :family "CaskaydiaCove Nerd Font-11"
                        :height 110
                        :weight 'normal
                        :width  'condensed)
(add-to-list 'default-frame-alist '(font . "CaskaydiaCove Nerd Font-11"))
(set-frame-font "CaskaydiaCove Nerd Font 11" nil t)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** Emoji fonts
Show and insert emojis.
From https://ianyepan.github.io/posts/emacs-emojis/
#+begin_src emacs-lisp
(use-package emojify
  :config
  (when (member "Segoe UI Emoji" (font-family-list))
    (set-fontset-font
     t 'symbol (font-spec :family "Segoe UI Emoji") nil 'prepend))
  (setq emojify-display-style 'unicode)
  (setq emojify-emoji-styles '(unicode)))
#+end_src
** User interface
*** Themes and modeline
#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-height 15)
  (doom-modeline-bar-width 6)
  (doom-modeline-minor-modes t)
  (doom-modeline-buffer-file-name-style 'truncate-except-project))

;; Custom theme from doom
(use-package doom-themes
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  :config
  (load-theme 'doom-snazzy t))
#+end_src
*** No beeps
#+BEGIN_SRC emacs-lisp
;;No beep
(setq visible-bell t)
#+END_SRC
*** Buffer setup
Unique buffernames with uniquify.
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :straight (:type built-in)
    :config
    (setq uniquify-buffer-name-style 'forward))
#+END_SRC
*** Time
Display time as 24-hour format
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
#+END_SRC

** Rainbows
Use different colors for delimeters to increase readability.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
      :hook
      ((org-mode prog-mode) . rainbow-delimiters-mode))
#+END_SRC
** Rainbow colors
Colorize numbers and text.
#+begin_src emacs-lisp
(use-package rainbow-mode)
#+end_src
** Indentation
Use aggressive mode for indentation. Used to be auto-indent, but aggressive seems better.
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :config (global-aggressive-indent-mode t))
#+END_SRC
#+begin_src emacs-lisp
(setq-default tab-width 2)
(setq-default tab-always-indent 'complete)
(setq-default indent-tabs-mode nil)
#+end_src
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode t)
    (setq which-key-idle-delay 0))
#+END_SRC
** Company-mode
Complete anything
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish
  :config
  (setq company-idle-delay 0
  company-minimum-prefix-length 2)
  (global-company-mode t))
#+END_SRC
** ace-window
Switch windows and frames quickly.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-background nil)
    (setq aw-dispatch-always t)
    :bind (("M-o" . ace-window)
           ("C-x o" . aw-flip-window)))
#+END_SRC
** Resize windows
Use ~resize-window~ for changing size.
#+BEGIN_SRC emacs-lisp
  (use-package resize-window
    :bind ("C-;" . resize-window))
#+END_SRC
** Pretty bullets
This was slow before, in emacs 25.1, but seems to work now in version 25.2.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Undo-tree
Make undo more intuitive.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish
    :demand
    :config
    (global-undo-tree-mode 1)
    (setq undo-tree-visualizer-diff t)
    :bind (("C-z" . undo)
           ("C-S-z" . undo-tree-redo)))
#+END_SRC
** hungry-mode
Delete whitespace more efficiently.
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :config
  (global-hungry-delete-mode t)
  :custom (hungry-delete-except-modes '(minibuffer-mode)))
#+END_SRC
** avy
Jump to any character.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind (("C-." . avy-goto-char)
           ("C-:" . avy-goto-char-2)))
#+END_SRC
** Smart parenthesis
Automatically insert parenthesis.
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish
  :hook
  ((org-mode prog-mode) . smartparens-mode))
#+END_SRC
** Parens-mode
Add visual pairing of parenthesis.
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(customize-set-variable 'show-paren-style 'mixed)
#+end_src
** Whitespace butler
Help to keep config clean.
#+begin_src emacs-lisp
(use-package ws-butler
  :hook ((prog-mode conf-mode) . ws-butler-mode))
#+end_src
** ibuffer
Use ibuffer for buffers. Sort them accordingly. ibuffer is a built in command but use use-package for simpler configuration.
~projectile-ibuffer~ is also available with projectile.
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :straight (:type built-in)
    :bind ("C-x C-b" . ibuffer)
    :config
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("dired" (mode . dired-mode))
                   ("shell" (or
                             (mode . eshell-mode)
                             (mode . shell-mode)))
                   ("powershell" (mode . powershell-mode))
                   ("code" (mode . prog-mode))
                   ("magit" (or
                             (name . "^magit")
                             (name . "\\*magithub.*")))
                   ("emacs" (or
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Messages\\*$")))
                   ("Tramp" (or (filename . "^\\/scp:")
                                (name . "^\\*tramp")))
                   ("iBuffer" (mode . ibuffer-mode))
                   ("Gists" (name . "^\\*gist.*")))
                  ("Help"
                   ("Man" (mode . Man-mode))
                   ("Help" (or (name . "\\*Help\\*")
                               (name . "\\*Apropos\\*")
                               (name . "\\*info\\*")
                               (mode . help-mode)))
                   )
                  ("Org"
                   ("Org" (or
                           (mode . org-mode)
                           (name . "^\\*Org Agenda\\*$")))
                   ))))
    (setq ibuffer-show-empty-filter-groups nil)
    (setq ibuffer-expert t)
    :hook (ibuffer-mode .
                        (lambda ()
                          (ibuffer-auto-mode 1)
                          (ibuffer-switch-to-saved-filter-groups "default")
                          (unless (eq ibuffer-sorting-mode 'alphabetic)
                            (ibuffer-do-sort-by-alphabetic))))
    )
#+END_SRC
** ibuffer-vc
Get status by version-control.
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc
    :config
    (setq ibuffer-formats
          '((mark modified read-only vc-status-mini " "
                  (name 18 18 :left :elide)
                  " "
                  (size 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  (vc-status 16 16 :left)
                  " "
                  filename-and-process)))
    :hook (ibuffer-mode .
                        (lambda ()
                          (ibuffer-vc-set-filter-groups-by-vc-root)
                          (unless (eq ibuffer-sorting-mode 'alphabetic)
                            (ibuffer-do-sort-by-alphabetic))))
    )
#+END_SRC
** ibuffer-projectile
Group buffers based on projectile.
#+begin_src emacs-lisp
  (use-package ibuffer-projectile
    :bind (:map ibuffer-mode-map
                ("c" . ibuffer-projectile-set-filter-groups)
                ("/ -" . ibuffer-filter-by-directory)))
#+end_src
** Hydra
#+BEGIN_SRC emacs-lisp
;; Hydra keymapping support
(use-package hydra)
#+END_SRC
** Projectile
Find or switch to projects easy, and use ~counsel-projectile~.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish
    :init (when (file-directory-p "~/repos")
            (setq projectile-project-search-path '("~/repos")))

    :config
    (projectile-mode t)
    (setq projectile-completion-system 'ivy)
    (setq projectile-switch-project-action 'projectile-dired)

    (use-package counsel-projectile
      :init (counsel-projectile-mode 1))

    (defhydra hydra-projectile-other-window (:color teal)
      "projectile-other-window"
      ("f"  projectile-find-file-other-window        "file")
      ("g"  projectile-find-file-dwim-other-window   "file dwim")
      ("d"  projectile-find-dir-other-window         "dir")
      ("b"  projectile-switch-to-buffer-other-window "buffer")
      ("q"  nil                                      "cancel" :color blue))

(defhydra hydra-projectile (:color teal :hint nil)
      "
                   PROJECTILE: %(projectile-project-root)

                   Find File            Search/Tags          Buffers                Cache
              ------------------------------------------------------------------------------------------
                _F_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
               _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
               _fd_: file curr dir   _m_: multi-occur       _k_: Kill all buffers  _X_: cleanup non-existing
                _r_: recent file     _D_: Discover                             ^^^^_z_: cache current
                _d_: dir

              "
      ("a"   projectile-ag)
      ("b"   projectile-switch-to-buffer)
      ("c"   projectile-invalidate-cache)
      ("d"   projectile-find-dir)
      ("s-f" projectile-find-file)
      ("F"   projectile-find-file)
      ("ff"  projectile-find-file-dwim)
      ("fd"  projectile-find-file-in-directory)
      ("g"   ggtags-update-tags)
      ("i"   projectile-ibuffer)
      ("k"   projectile-kill-buffers)
      ("m"   projectile-multi-occur)
      ("p"   projectile-switch-project "switch project")
      ("r"   projectile-recentf)
      ("x"   projectile-remove-known-project)
      ("X"   projectile-cleanup-known-projects)
      ("z"   projectile-cache-current-file)
      ("D"   projectile-discover-projects-in-directory)
      ("'"   hydra-projectile-other-window/body "open other window")
      ("q"   nil "cancel" :color blue))

    :bind (("C-c p" . hydra-projectile/body)
           (:map projectile-mode-map
                 ("C-c P" . projectile-command-map)))) ;; Keep counsel-projectile for now
#+END_SRC
** htmlize
Needed by org-babel-export
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC
** Macrostep
To check the expanded macro. Useful with ~use-package~.
#+begin_src emacs-lisp
  (use-package macrostep
    :bind ("C-c e" . macrostep-mode))
#+end_src
** Dired customizations
Changes for local keyboard.
#+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :hook ( dired-mode . dired-hide-details-mode)
  :bind ("C-x C-d" . dired))
#+end_src
** Dired single
Reuse buffers for dired
#+begin_src emacs-lisp
(use-package dired-single
  :bind (("C-x d" . dired-single-magic-buffer)
         ([remap dired-find-file] . dired-single-buffer)
         ([remap dired-mouse-find-file-other-window] . dired-single-buffer-mouse)
         ([remap dired-up-directory] . dired-single-up-directory)
         (:map dired-mode-map
               ("'" . dired-single-up-directory))))
#+end_src
** Narrowing
Enable narrowing.
#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page   'disabled nil)
#+end_src
** Change yes-or-no to y-n
#+BEGIN_SRC emacs-lisp
;; Press y or n for yes or no
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Hippie expand
Hippie expands text automagically.
#+begin_src emacs-lisp
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src
** Abbrev mode
Abbrev autocorrects words.
#+begin_src emacs-lisp
(setq-default abbrev-mode t)
#+end_src
** Increase text scale
Shortcuts to increase font-size.
#+begin_src emacs-lisp
(bind-key "C-+" 'text-scale-increase)
(bind-key "C--" 'text-scale-decrease)
(customize-set-variable 'text-scale-mode-step 1.05)
#+end_src
* Backup
Backup and autosave options, + history
** Backup of files
Saves backup of files in emacs-homedir. Keeps several versions of the files.
#+BEGIN_SRC emacs-lisp
     ;; From https://github.com/magnars/.emacs.d
     ;; Write backup files to own directory
  (defconst my/emacs-backup-dir
     (expand-file-name "backup/" no-littering-var-directory))
  (setq backup-directory-alist
        `((".*" . ,my/emacs-backup-dir)))
     ;; Make backups of files, even when they're in version control
     (setq delete-old-versions t
           version-control t
           vc-make-backup-files t
           backup-by-copying t
           kept-old-versions 10
           kept-new-versions 20
           auto-save-interval 50
           delete-by-moving-to-trash t)
#+END_SRC
** Save current position
Go back to where you last were in the file.
#+BEGIN_SRC emacs-lisp
  ;; Save point position between sessions
  (use-package saveplace
    :config
    (save-place-mode 1)
    (setq save-place-file (expand-file-name ".places" no-littering-var-directory)))
#+END_SRC
** Save history
Save a history of edited files.
#+BEGIN_SRC emacs-lisp
  (setq savehist-file (expand-file-name ".savehist" no-littering-var-directory))
  (savehist-mode 1)
  (setq
   history-length 50
   history-delete-duplicates t
   savehist-save-minibuffer-history 1
   savehist-additional-variables
   '(kill-ring
     search-ring
     regexp-search-ring))
#+END_SRC
** Super-save
Save buffers when idle
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :diminish
  :custom
  (add-to-list 'super-save-triggers 'ace-window)
  (add-to-list 'super-save-triggers 'magit-status)
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  (super-save-auto-save-when-idle t)
  (super-save-idle-duration 8)
  (super-save-remote-files nil)
  (super-save-exclude '(".gpg"))
  (auto-save-default nil)
  (auto-save-no-message t)
  :config (super-save-mode t))
#+END_SRC
* Language support
Add support for different programming languages and configuration files.
** Powershell mode
Powershell-mode is useful.
#+BEGIN_SRC emacs-lisp
(use-package powershell
  :straight (powershell :fork t)
  :commands powershell
  :config
  (setq powershell-eldoc-def-files (list (expand-file-name "eldoc/powershell-eldoc.el" user-emacs-directory)))
  (if (eq system-type 'gnu/linux)
      (setq powershell-location-of-exe "/usr/bin/pwsh")
    (setq powershell-location-of-exe "pwsh.exe"))
  (setq explicit-powershell\.exe-args '("-NoLogo" "-NoProfile" "-Command" "-"))
  (setq explicit-pwsh\.exe-args '("-NoLogo" "-NoProfile" "-Command" "-"))
  (customize-set-variable 'powershell-indent 4)
  :custom-face (font-lock-variable-name-face ((t (:foreground "#d98026" :weight normal)))))
#+END_SRC
** Dos-mode
Only in windows.
#+BEGIN_SRC emacs-lisp
  (use-package bat-mode)
#+END_SRC
** Markdown-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands
    (markdown-mode gfm-mode)
  :mode
    (("README\\.md\\'" . gfm-mode)
    ("\\.md\\'" . markdown-mode)
    ("\\.markdown\\'" . markdown-mode))
  :init
    (setq markdown-command "multimarkdown")
  :config
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode)))
#+END_SRC
** Markdown preview mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-preview-mode
    :commands markdown-preview)
#+END_SRC
** SSH-config
Add mode for configuring .ssh/config and other related to SSH.
#+BEGIN_SRC emacs-lisp
(use-package ssh-config-mode
:config
 (add-to-list 'auto-mode-alist '("/\\.ssh/config\\'"     . ssh-config-mode))
 (add-to-list 'auto-mode-alist '("/sshd?_config\\'"      . ssh-config-mode))
 (add-to-list 'auto-mode-alist '("/known_hosts\\'"       . ssh-known-hosts-mode))
 (add-to-list 'auto-mode-alist '("/authorized_keys2?\\'" . ssh-authorized-keys-mode))
 (add-hook 'ssh-config-mode-hook 'turn-on-font-lock)
)
#+END_SRC
** Git
Modes for editing git-files
*** git-modes
#+BEGIN_SRC emacs-lisp
  (use-package git-modes
    :config
    (add-to-list 'auto-mode-alist (cons "/.dockerignore\\'" 'gitignore-mode)))
#+END_SRC
** Yara-files
Mode that supports editing of Yara-files.
#+BEGIN_SRC emacs-lisp
  (use-package yara-mode)
#+END_SRC
** Elastic search mode
#+BEGIN_SRC emacs-lisp
  (use-package es-mode
        :config
    (add-to-list 'auto-mode-alist '("\\.es$" . es-mode)))
#+END_SRC
** Logstash-mode
Use logstash-mode for conf-files in logstash-directories.
#+BEGIN_SRC emacs-lisp
  (use-package logstash-conf
    :mode  (("logstash.*\\.conf\\'" . logstash-conf-mode)
            ("pipeline.*\\.conf\\'" . logstash-conf-mode)))
#+END_SRC
** ini-mode
Windows ini-files.
#+BEGIN_SRC emacs-lisp
  (use-package ini-mode
    :mode "\\.ini\\'")
#+END_SRC
** CSV
Read csv-files.
#+BEGIN_SRC emacs-lisp
(use-package csv-mode)
#+END_SRC
** Docker file mode
Support Dockerfile.
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
** Docker compose
Support Docker Compose files.
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode)
#+END_SRC
** Toml-Mode
Support .toml-files, eg for Hugo.
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode)
#+END_SRC
** X509
Support for certificate files, with a hydra to navigate options.
#+BEGIN_SRC emacs-lisp
  (use-package x509-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.cer\\'" . x509-mode))
    (add-to-list 'auto-mode-alist '("\\.crt\\'" . x509-mode))
    (add-to-list 'auto-mode-alist '("\\.crl\\'" . x509-mode))
    (add-to-list 'auto-mode-alist '("\\.csr\\'" . x509-mode))
    (add-to-list 'auto-mode-alist '("\\.pem\\'" . x509-mode))
    (add-to-list 'auto-mode-alist '("\\.key\\'" . x509-mode))
    (defhydra hydra-x509 (:color blue :columns 2)
      "X509 commands"
      ("a" x509-viewasn1 "View ASN1")
      ("c" x509-viewcert "View certificate")
      ("d" x509-viewdh "View DH")
      ("k" x509-viewkey "View key")
      ("r" x509-viewcrl "View CRL")
      ("q" nil "cancel"))
    :bind (:map x509-mode-map
                ("h" . hydra-x509/body))
    )
#+END_SRC
** JSON-mode
Edit JSON-files.
#+begin_src emacs-lisp
(use-package json-mode
  :hook (json-mode .
       (lambda ()
         (make-local-variable 'js-indent-level)
         (setq js-indent-level 2))))
#+end_src
** Editorconfig
To get automatic settings for git repositories. https://editorconfig.org/
#+begin_src emacs-lisp
(use-package editorconfig
  :diminish
  :hook (prog-mode . editorconfig-mode))
#+end_src
*
** Info-colors
Colorisation of Info-text.
#+begin_src emacs-lisp
(use-package info-colors
  :hook (Info-selection . info-colors-fontify-node)
  :custom-face
  (info-colors-lisp-code-block ((t (:foreground "LightSkyBlue" :weight normal))))
  (info-xref ((t (:foreground "DeepSkyBlue" :weight normal))))
  (Info-quoted ((t (:foreground "SkyBlue" :weight normal)))))
#+end_src
** LUA
For nmap script-engine files.
#+begin_src emacs-lisp
  (use-package lua-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
    (add-to-list 'auto-mode-alist '("\\.nse$" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))
#+end_src
** Perl
#+begin_src emacs-lisp
(defalias 'perl-mode 'cperl-mode)
#+end_src
** LSP
From https://emacs-lsp.github.io/lsp-mode/page/installation/
#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         ((cperl-mode . lsp-deferred)
   (powershell-mode . lsp-deferred))
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp lsp-deferred)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

;; optional if you want which-key integration
(use-package which-key
  :config
  (which-key-mode))
#+end_src
** Python
#+begin_src emacs-lisp
(customize-set-variable 'python-indent-offset 4)
#+end_src
** Elpy
#+begin_src emacs-lisp
(use-package elpy)
#+end_src
* Git and projects
** Magit
Magit is a Git-tool, probably the best porcelain in the world!
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config
    (setq magit-completing-read-function 'ivy-completing-read)
    (if (eq system-type 'windows-nt)
        (setq-default with-editor-emacsclient-executable "emacsclientw.exe")
      (setq-default with-editor-emacsclient-executable "emacsclient")))
#+END_SRC
** Magit Forge
Manage github things from emacs.
#+begin_src emacs-lisp
  (use-package forge
    :after gh)
#+end_src
* Reverting
Map <F5> to revert-buffer. But only revert if the file is not modified.
#+BEGIN_SRC emacs-lisp
(global-set-key
  (kbd "<f5>")
  (lambda (&optional force-reverting)
  "Interactive call to revert-buffer. Ignoring the auto-save
  file and not requesting for confirmation. When the current buffer
  is modified, the command refuses to revert it, unless you specify
  the optional argument: force-reverting to true."
  (interactive "P")
  ;;(message "force-reverting value is %s" force-reverting)
  (if (or force-reverting (not (buffer-modified-p)))
  (revert-buffer :ignore-auto :noconfirm)
  (error "The buffer has been modified"))))
#+END_SRC
Setup autorevert.
#+begin_src emacs-lisp
(customize-set-variable 'global-auto-revert-mode t)
(customize-set-variable 'global-auto-revert-non-file-buffers t)
#+end_src
* Bookmarks
Save bookmarks all the time.
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'bookmark-save-flag 1)
(customize-set-variable 'bookmark-version-control t)
#+END_SRC
* Denote
Try out *Denote* to take notes. For more info see the [[https://protesilaos.com/emacs/denote][Denote Manual]].
This is mostly copied from the sample config.
#+begin_src emacs-lisp
(use-package denote
  :custom
  (denote-directory (expand-file-name "notes/" my/onedrive-dir))
  (denote-dired-directories (expand-file-name "notes/" my/onedrive-dir))
  (denote-date-prompt-use-org-read-date t)
  (denote-known-keywords '("emacs" "project" "powershell"))
  :hook
  (dired-mode-hook . #'denote-dired-mode-in-directories)
  (find-file-hook . #'denote-link-buttonize-buffer)
  :bind
  ("C-c n j" . my/denote-journal)
  ("C-c n n" . #'denote)
  ("C-c n N" . #'denote-type)
  ("C-c n d" . #'denote-date)
  ("C-c n s" . #'denote-subdirectory)
  ("C-c n t" . #'denote-template)
  ("C-c n i" . #'denote-link)
  ("C-c n I" . #'denote-link-add-links)
  ("C-c n b" . #'denote-link-backlinks)
  ("C-c n f f" . #'denote-link-find-file)
  ("C-c n f b" . #'denote-link-find-backlink)
  ("C-c n r" . #'denote-rename-file)
  ("C-c n R" . #'denote-rename-file-using-front-matter)
  (:map dired-mode-map
        ("C-c C-d C-i" . #'denote-link-dired-marked-notes)
        ("C-c C-d C-r" . #'denote-dired-rename-marked-files)
        ("C-c C-d C-R" . #'denote-dired-rename-marked-files-using-front-matter))
  (:map org-mode-map
        ("C-c n x" . my/denote-split-org-subtree)))
#+end_src
** Denote journal
Create a journal directly with denote.
#+begin_src emacs-lisp
(defun my/denote-journal ()
  "Create an entry tagged 'journal', while prompting for a title."
  (interactive)
  (denote
   (denote--title-prompt)
   '("journal")))
#+end_src
** Capture denote with org
Capture notes for denote with org-capture. Create a specific template for this.
#+begin_src emacs-lisp
(with-eval-after-load 'org-capture
  (setq denote-org-capture-specifiers "%l\n%i\n%?")
  (add-to-list 'org-capture-templates
               '("d" "New denote, note with Denote)" plain
                 (file denote-last-path)
                 #'denote-org-capture
                 :no-save t
                 :immediate-finish nil
                 :kill-buffer t
                 :jump-to-captured t)))
#+end_src
** Split org header to denote
Inside an org-file, split the header and move it to a denote file instead.
#+begin_src emacs-lisp
(defun my/denote-split-org-subtree ()
  "Create new Denote note as an Org file using current Org subtree."
  (interactive)
  (let ((text (org-get-entry))
        (heading (org-get-heading :no-tags :no-todo :no-priority :no-comment))
        (tags (org-get-tags)))
    (delete-region (org-entry-beginning-position) (org-entry-end-position))
    (denote heading tags 'org)
    (insert text)))
#+end_src
** Denote subdirectory
Copied from the [[https://protesilaos.com/emacs/denote][Denote manual]].
#+begin_src emacs-lisp
(defun my/denote-subdirectory ()
  "Create note while prompting for a subdirectory.

Available candidates include the value of the variable
`denote-directory' and any subdirectory thereof.

This is equivalent to calling `denote' when `denote-prompts' is
set to '(subdirectory title keywords)."
  (declare (interactive-only t))
  (interactive)
  (let ((denote-prompts '(subdirectory title keywords)))
    (call-interactively #'denote)))
#+end_src
** Denote templates
Templates with Denote. Syntax for this from the manual.
#+begin_src emacs-lisp
(customize-set-variable 'denote-templates
                        `((meeting-notes . ,(concat "* Notes\n"
                                                    "- Subject:\n"
                                                    "- Date:\n"
                                                    "- Attendees:\n"))))
#+end_src
* Org-mode stuff
Read [[https://orgmode.org/worg/org-configs/org-customization-guide.html][Org Beginners Customization Guide]] for info about this.
** Org-mode variables
*** Other variables
Customize org-mode settings.
#+BEGIN_SRC emacs-lisp
(setq org-use-sub-superscripts '{})
(setq org-export-with-sub-superscripts '{})
(setq org-export-coding-system 'utf-8)
(setq org-export-backends '(ascii html latex odt org))
(setq org-export-use-babel nil)
(setq org-agenda-skip-deadline-prewarning-if-scheduled t)
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-scheduled-if-deadline-is-shown "repeated-after-deadline")
(setq org-agenda-include-diary nil)
(setq org-agenda-span 14)
(setq org-log-done 'time)
(setq org-log-redeadline 'time)
(setq org-log-reschedule 'time)
(setq org-log-refile 'time)
(setq org-log-into-drawer t)
(setq org-enforce-todo-checkbox-dependencies t)
(setq org-enforce-todo-dependencies t)
(setq org-agenda-dim-blocked-tasks t)
(setq org-fast-tag-selection-single-key t)
(setq org-use-fast-todo-selection t)
(setq org-enable-priority-commands nil)
(setq org-src-preserve-indentation t)
(setq org-confirm-babel-evaluate 'my/org-confirm-babel-evaluate)
  #+END_SRC
*** Refile
Refiling notes settings.
#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path 'file)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC
*** Custom to disable verification of evaluation.
From [[https://gitlab.com/spudlyo/dotfiles/-/blob/master/emacs/.config/emacs/init.el][Mike Hamrick, GitLab]].
#+begin_src emacs-lisp
(defun my/org-confirm-babel-evaluate (lang body)
  "Don't confirm code execution for these languages."
  (not (member lang '("python" "emacs-lisp" "shell" "powershell" "perl" "elisp" "eshell"))))
#+end_src
** Org-modules
To be able to execute code in org mode these should be loaded.
#+begin_src emacs-lisp
(require 'ob-shell)
(require 'ob-eshell)
(require 'ob-awk)
(require 'ob-python)
(require 'ob-C)
#+end_src
*** Babel for Powershell
Execute powershell from org-mode.
#+begin_src emacs-lisp
(use-package ob-powershell
  :custom (ob-powershell-powershell-command "pwsh -NoLogo -NoProfile")
  :config (require 'ob-powershell))
#+end_src
** Org-files
My org-files for Todo-list and agenda. Store the filenames to use for agenda in a separate file.
*** Keywords
Keywords, keybindings and colors for headlines in org-mode.
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t!)" "IN-PROGRESS(p!)" "NEXT(n!)" "WAITING(w@/!)" "|" "DONE(d@)")
          (sequence "IDEA(i!)" "READ(r!)" "|")
          (sequence "REPORT(z!)" "BUG(b!)" "|" "RESOLVED(x@)")
          (sequence "|" "CANCELED(c@)" "DELEGATED(l@)" "SOMEDAY(s!)")))
  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "cyan" :weight bold))
          ("IN-PROGRESS" . (:foreground "yellow" :weight bold))
          ("NEXT" . (:foreground "yellow" :weight bold))
          ("DONE" . (:foreground "green" :weight bold))
          ("WAITING" . (:foreground "red" :weight bold))
          ("SOMEDAY" . (:foreground "gray" :weight bold))
          ("IDEA" . (:foreground "dark orange" :weight bold))
          ("READ" . (:foreground "dark orange" :weight bold))
          ("BUG" . (:foreground "magenta" :weight bold))
          ("REPORT" . (:foreground "cyan" :weight bold))))
  (bind-key "C-c l" 'org-store-link)
  (bind-key "C-c a" 'org-agenda)
  (bind-key "C-c c" 'org-capture)
#+END_SRC
*** Org Archiving
Separate file for archiving stuff. Use datetree syntax.
#+BEGIN_SRC emacs-lisp
(setq my/org-archive-file (expand-file-name "archive/archive.org" my/org-directory))
(when (not (file-exists-p (file-name-directory my/org-archive-file)))
      (make-directory (file-name-directory my/org-archive-file) t))
(setq org-archive-location (concat my/org-archive-file "::datetree/* From %s"))
#+END_SRC
** Org custom agenda
For more info about this, see [[http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html][Org Agenda Custom Commands]].
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("c" "Weekly schedule"
           ((agenda ""
                    ((org-agenda-span 10)
                     (org-agenda-start-on-weekday nil)
                     (org-agenda-repeating-timestamp-show-all t)
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
            (alltodo ""
                     ((org-agenda-time-grid nil)
                      (org-deadline-warning-days 90))))
           ((org-agenda-compact-blocks t)))

          ("d" "Upcoming dates"
           ((agenda ""
                    ((org-agenda-entry-types '(:deadline))))
            (agenda ""
                    ((org-agenda-entry-types '(:scheduled)))))
           ((org-agenda-time-grid nil)
            (org-agenda-start-on-weekday nil)
            (org-agenda-span 1)
            (org-deadline-warning-days 14)
            (org-agenda-time-grid nil)
            (org-agenda-compact-blocks t)))

          ("l" "Log for last week"
           ((agenda ""
                    ((org-agenda-span 14)
                     (org-agenda-start-day "-7d")
                     (org-agenda-repeating-timestamp-show-all t)
                     (org-agenda-include-inactive-timestamps t))))
           ((org-agenda-compact-blocks t)))

          ("w" "Agenda and Office-related tasks" tags-todo "work|office"
           ((agenda "")
            (todo "TODO|IN-PROGRESS")
            (org-agenda-sorting-strategy '(priority-up effort-down))))
          ))
#+END_SRC
** Org-templates
A few templates to speed up capture.
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      `(("t" "To do items" entry (file+headline my/notes-file "To Do Items")
         "* TODO %^{Description of todo}\nAdded: %U\n\n%?" :prepend t)

        ;;Links
        ("l" "Link" entry (file+headline my/notes-file "Links")
         "* [[%^C][%^{Title}]]  %^G\nAdded: %U\n\n%?" :prepend t)

        ;; Notes
        ("n" "Note" entry (file+headline my/notes-file "Notes")
         "* %^{Title} :NOTE:\nAdded: %U\n%a\n\n%?" :clock-in t :clock-resume t)

        ;; Idea
        ("i" "Idea" entry (file+headline my/notes-file "Someday")
         "* IDEA %^{Title}\nAdded: %U\n%?" :prepend t)

        ;; Journal
        ("j" "Journal" entry (file+olp+datetree my/diary-file)
         "* %^{Enter title}\n%U\n%?" :clock-in t :clock-resume t)

        ;; Notes for code
        ("c" "Coding stuff")
        ("cc" "note with code" entry (file+headline my/notes-file "Code")
         "* %? \nAdded: %U\n#+begin_src %^{Language?|emacs-lisp|sh|powershell|python|html}\n%^C\n#+end_src\n")
        ("cs" "note with code, source" entry (file+headline my/notes-file "Code")
         "* %? \nAdded: %U\n#+begin_src %^{Language?|emacs-lisp|sh|powershell|python|html}\n%^C\n#+end_src\n%a\n")

        ;; Reports and bugs
        ("r" "Reporting")
        ("rb" "Bug" entry (file+headline my/notes-file "Reports")
         "* BUG %^{Description of bug} %^G\nAdded: %U\n\n%?")
        ("rr" "Report" entry (file+headline my/notes-file "Reports")
         "* REPORT %^{Description of report} %^G\nAdded: %U\n#+begin_example\n%^C\n#+end_example\n\n%?")
        ))
#+END_SRC

** Org tangle init files
Untangle init files automatically when save with org-babel.
From [[https://github.com/daviwil/emacs-from-scratch/blob/9388cf6ecd9b44c430867a5c3dad5f050fdc0ee1/init.el][Emacs From Scratch: Everything in Babel]].
#+begin_src emacs-lisp
(defun my/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name) my/emacs-orgfile)
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src
** Org Exports
*** Export GHF markdown
Github-flavoured markdown
#+BEGIN_SRC emacs-lisp
  (use-package ox-gfm
    :after ox)
#+END_SRC
*** Export markdown
#+BEGIN_SRC emacs-lisp
  (use-package auto-org-md
    :after ox)
#+END_SRC
*** Confluence
#+begin_src emacs-lisp
(use-package ox-confluence)
#+end_src
*** Jira
#+begin_src emacs-lisp
(use-package ox-jira)
#+end_src
*** Org reveal
Use Org Reveal for presentations. Is called =ox-reveal= at Melpa.
#+begin_src emacs-lisp
(use-package ox-reveal
  :custom (org-reveal-root (concat "file:///" (expand-file-name "vendor/reveal.js" user-emacs-directory)))
  :config
  (require 'ox-reveal))
#+end_src
** Org publish
Publish org-files to html and others.
#+begin_src emacs-lisp
(customize-set-variable 'org-publish-use-timestamps-flag nil)
(setq my/org-publish-directory (expand-file-name "www/Publish" "~"))
(setq org-publish-project-alist
      `(("Org" :components ("org-notes" "org-images" "org-css" "org-pdf"))
        ("org-notes"
         :base-directory ,my/org-directory
         :base-extension "org"
         :exclude "level-[0-9]\.org"
         :publishing-directory ,my/org-publish-directory
         :publishing-function org-html-publish-to-html
         :recursive t
         :headline-levels 4
         :auto-preamble t
         :auto-sitemap t
         :html-head "<link rel=\"stylesheet\"
                    href=\"/css/simple.css\"
                    type=\"text/css\"/>"
         :html-head-extra "<style>pre.src{background:#343131;color:white;} </style>"
         :html-validation-link nil)

        ("org-images"
         :base-directory ,(expand-file-name "images/" my/org-directory)
         :base-extension "jpg\\|gif\\|png"
         :publishing-directory ,(expand-file-name "images/" my/org-publish-directory)
         :publishing-function org-publish-attachment)

        ("org-css"
         :base-directory ,(expand-file-name "css/" my/org-directory)
         :base-extension "css\\|js"
         :publishing-directory ,(expand-file-name "css/" my/org-publish-directory)
         :recursive t
         :publishing-function org-publish-attachment)

        ("org-pdf"
         :base-directory ,my/org-directory
         :base-extension "pdf"
         :publishing-directory ,(expand-file-name "static/" my/org-publish-directory)
         :recursive t
         :publishing-function org-publish-attachment)))
#+end_src
* Other packages
** Elfeed
Use =elfeed= to read RSS news.
#+BEGIN_SRC emacs-lisp
(use-package elfeed-org
  :custom
  (rmh-elfeed-org-files (list (expand-file-name "elfeed.org" my/org-directory)))
  (rmh-elfeed-org-auto-ignore-invalid-feeds nil)
  :config
  (elfeed-org))
(use-package elfeed
  :custom-face (elfeed-search-unread-title-face ((t (:weight normal :foreground "khaki2")))))
#+end_src
** try
Test out emacs packages without installing.
#+begin_src emacs-lisp
(use-package try
  :config
  (add-to-list 'package-archives
               '("melpa" .    "https://melpa.org/packages/") t))
#+end_src
** HTTP-server
This is an http-server running in emacs.
#+begin_src emacs-lisp
(use-package simple-httpd
  :disabled nil
  :commands httpd-start
  :config (customize-set-variable 'httpd-root my/org-publish-directory))
#+end_src
** Merriam Webster lookups
Use the thesaurus at Merriam Webster.
#+begin_src emacs-lisp
(use-package mw-thesaurus)
#+end_src
